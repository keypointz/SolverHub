name: CMake Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup Visual Studio Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install Boost
      uses: MarkusJx/install-boost@v2.4.4
      id: install-boost
      with:
        boost_version: 1.78.0
        platform_version: 2022
        toolset: msvc
        arch: x86_64

    - name: Install Eigen
      run: |
        $url = "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip"
        $output = "eigen.zip"
        Invoke-WebRequest -Uri $url -OutFile $output
        Expand-Archive -Path $output -DestinationPath .
        Move-Item -Path eigen-3.4.0 -Destination eigen

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEIGEN3_INCLUDE_DIR=${{github.workspace}}/eigen -DBoost_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
